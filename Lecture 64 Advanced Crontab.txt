Crontab in Linux with 20 Useful Examples to Schedule Jobs
==========================================================

 
The crontab is used for running specific tasks on a regular interval. Linux crontab is similar to windows task schedules. Crontab is very useful for routine tasks like scheduling system scanning, daily backups, etc. Crontab executes jobs automatically in the back-end at a specified time and interval. In this tutorial, you will learn to uses crontab with 20 useful examples for scheduling jobs. You can also use crontab for the tasks to run once in future only, but for any tasks to run once we recommends to use Linux at command.

If you do not have crontab installed on your system refer article Install Crontab in CentOS/RHEL.

Linux Crontab Syntax
Linux crontab has six fields. 1-5 fields defines the date and time of execution. The 6th fields are used for command or script to be executed.The Linux crontab syntax are as following:

[Minute] [Hour] [Day_of_the_Month] [Month_of_the_Year] [Day_of_the_Week] [command]


crontab-2

Minute â€“ A minute value can be between 0-59
Hour â€“ A hour value can be between 0-23
Day_of_the_month â€“ This value can between 1-31. For the months having less days will ignore remaining part
Month_of_the_year â€“ This can be between 1-12. You can also define this value with first three alphebts of month like jan, feb, mar, apr etc.
Day_of_the_Week â€“ This can be the value between 0-7. Where 0 and 7 for Sunday, 1 for Monday, 2 for Tuestday etc. You can also use first three alphabets of days like, sun, mon, tue, wed, etc.
Now, below statements will describe you to how to define multiple values or ranges. Read below and understand.


Astrics (*) â€“ Matches anything
Multiple values â€“ Use command (,) to define multiple values like 2,4,8 or sun,fri or jan,oct,dec etc.
Define range â€“ You can define range using the hyphen like: 1-10 or 20-30 or sun-fri or feb-apr
Define multiple range â€“ You can define multiple ranges with command separated like: jan-mar,jul-sep
How to Add/Edit Crontab
To add or update jobs in crontab, use the below command. It will open a crontab file in the editor where a job can be added/updated.

crontab -e
By default, it will edit crontab entries of current logged in user. To edit other user crontab use command as below

crontab -u username -e
Change the EDITOR environment variable to change your default editor.


How to List Crontab
To view crontab entries of current users use the following command.

crontab -l
Use -u followed by the username to view crontab entries of the specified user.

crontab -u username -l
20 Useful Crontab Examples
Here is the list of examples for scheduling cron jobs in a Linux system using crontab.

------------------------------------------
1. Schedule a cron to execute at 2am daily.

0 2 * * * /bin/bash /tmp/script.sh

Asterisk (*) is used for matching all the records.

------------------------------------------
2. Schedule a cron to execute twice a day.
Below example command will execute at 5 AM and 5 PM daily. You can specify multiple time stamps by comma-separated.

0 5,17 * * * /tmp/script.sh

-----------------------------------------
3. Schedule a cron to execute on every minutes.
Generally, we donâ€™t require any script to execute on every minute but in some cases, you may need to configure it.

* * * * *  /tmp/script.sh

------------------------------------------
4. Schedule a cron to execute on every Sunday at 5 PM.
This type of cron is useful for doing weekly tasks, like log rotation, etc.

0 17 * * sun  /tmp/script.sh

------------------------------------------
5. Schedule a cron to execute on every 10 minutes.
If you want to run your script on 10 minutes interval, you can configure like below. These types of crons are useful for monitoring.

*/10 * * * * /scripts/monitor.sh
*/10: means to run every 10 minutes. Same as if you want to execute on every 5 minutes use */5.

-------------------------------------------
6. Schedule a cron to execute on selected months.
Sometimes we required scheduling a task to be executed for selected months only. Below example script will run in January, May and August months.

* * * jan,may,aug *  /script/script.sh

--------------------------------------------
7. Schedule a cron to execute on selected days.
If you required scheduling a task to be executed for selected days only. The below example will run on each Sunday and Friday at 5 PM.

0 17 * * sun,fri  /script/script.sh

---------------------------------------------
8. Schedule a cron to execute on first sunday of every month.
To schedule a script to execute a script on the first Sunday only is not possible by time parameter, But we can use the condition in command fields to do it.

0 2 * * sun  [ $(date +%d) -le 07 ] && /script/script.sh

---------------------------------------------
9. Schedule a cron to execute on every four hours.
If you want to run a script on 4 hours interval. It can be configured like below.

0 */4 * * * /tmp/script.sh

---------------------------------------------
10. Schedule a cron to execute twice on every Sunday and Monday.
To schedule a task to execute twice on Sunday and Monday only. Use the following settings to do it.

0 4,17 * * sun,mon /tmp/script.sh

---------------------------------------------
11. Schedule a cron to execute on every 30 Seconds.
To schedule a task to execute every 30 seconds is not possible by time parameters, But it can be done by schedule same cron twice as below.

* * * * * /tmp/script.sh
* * * * *  sleep 30; /tmp/script.sh

----------------------------------------------
12. Schedule a multiple tasks in single cron.
To configure multiple tasks with single cron, Can be done by separating tasks by the semicolon ( ; ).

* * * * * /tmp/script.sh; /scripts/scrit2.sh

-----------------------------------------------
13. Schedule tasks to execute on yearly ( @yearly ).
@yearly timestamp is similar to â€œ0 0 1 1 *â€œ. It will execute a task on the first minute of every year, It may useful to send new year greetings ðŸ™‚

@yearly /tmp/script.sh

------------------------------------------------
14. Schedule tasks to execute on monthly ( @monthly ).
@monthly timestamp is similar to â€œ0 0 1 * *â€œ. It will execute a task in the first minute of the month. It may useful to do monthly tasks like paying the bills and invoicing to customers.

@monthly /tmp/script.sh

---------------------------------------------------
15. Schedule tasks to execute on Weekly ( @weekly ).
@weekly timestamp is similar to â€œ0 0 * * monâ€œ. It will execute a task in the first minute of the week. It may useful to do weekly tasks like the cleanup of the system etc.

@weekly /bin/script.sh

---------------------------------------------------
16. Schedule tasks to execute on daily ( @daily ).
@daily timestamp is similar to â€œ0 0 * * *â€œ. It will execute a task in the first minute of every day, It may useful to do daily tasks.

@daily /tmp/script.sh

---------------------------------------------------
17. Schedule tasks to execute on hourly ( @hourly ).
@hourly timestamp is similar to â€œ0 * * * *â€œ. It will execute a task in the first minute of every hour, It may useful to do hourly tasks.

@hourly /tmp/script.sh

----------------------------------------------------
18. Schedule tasks to execute on system reboot ( @reboot ).
@reboot is useful for those tasks which you want to run on your system startup. It will be the same as system startup scripts. It is useful for starting tasks in the background automatically.

@reboot /tmp/script.sh

----------------------------------------------------
19. Redirect Cron Results to specified email account.
By default, cron sends details to the current user where cron is scheduled. If you want to redirect it to your other account, can be done by setup MAIL variable like below

# crontab -l
MAIL=bob
0 2 * * * /tmp/script.sh

----------------------------------------------------
20. Taking backup of all crons to plain text file.
I recommend keeping a backup of all jobs entry in a file. This will help you to recover crons in case of accidental deletion.

Check current scheduled cron:

# crontab -l
MAIL=rahul
0 2 * * * /tmp/script.sh
Backup cron to text file:

# crontab -l > cron-backup.txt
# cat cron-backup.txt
MAIL=rahul
0 2 * * * /tmp/script.sh
Removing current scheduled cron:

# crontab -r
# crontab -l
no crontab for root
Restore crons from text file:

# crontab cron-backup.txt
# crontab -l
MAIL=rahul
0 2 * * * /tmp/script.sh

++++++++++++++++++++++++++++++++++++++++++++++++++++
Schedule Some Complex/Advanced Cronjobs in Linux:
=================================================
"e.g. job for 3rd wednesday each month, job for monday & tuesday each week , job for date 1 to 5 each month etc."

Schedule Cron Jobs For:

1. To print "Please Subscribe Nehra Classes Youtube Channel" on the terminal at 11:30 PM IST on weekdays."
30 23 * * 1-5 echo "Please Subscribe Nehra Classes Youtube Channel" > /dev/pts/0

# timedatectl set-ntp false

# timedatectl set-time "2021-06-13 23:28:00"

2. To print "Please Like Our Videos" on the terminal at 11:40 PM IST on weekends."
40 23 * * sat,sun echo "Please Like Our Videos"

3. To print "Our Subscribers Are Great !!" on the terminal at 11:50 PM IST only on 2nd Sunday of each month."
58 23 8-14 * * [ `date +\%u` = 7 ] && echo "Our Subscribers Are Great !!" > /dev/pts/0

4. To save the output of 'df -hT' in /var/log/filesystems at 11:55 PM IST only on 4th Monday of each month.
58 23 22-28 * * [ `date +\%u` = 1 ] && df -hT > /var/log/filesystems

5. To save the output of 'lsblk' in /var/log/blocks at 11:58 PM ST only on 10 to 15 date each month.
58 23 10-15 * * lsblk > /var/log/blocks
===================================================
Thanks for reading this article, I hope it will help you to understand Crontab in Linux. For scheduling one time tasks you can also use Linux at command.

